"""initial

Revision ID: ccb6eb89a8f3
Revises: 
Create Date: 2021-05-30 22:44:44.597615

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql.expression import null


# revision identifiers, used by Alembic.
revision = 'ccb6eb89a8f3'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('configuration',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(length=25), nullable=True),
    sa.Column('value', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_configuration_key'), 'configuration', ['key'], unique=True)
    op.create_table('kiosk',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('printer_name', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('storage_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=30), nullable=False),
    sa.Column('location', sa.String(length=30), nullable=True),
    sa.Column('valid_days', sa.Integer(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=False, default=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=True),
    sa.Column('displayname', sa.String(length=100), nullable=True),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('email', sa.String(length=150), nullable=True),
    sa.Column('next_use', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_banned', sa.Boolean(), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('can_report', sa.Boolean(), nullable=True),
    sa.Column('can_configure', sa.Boolean(), nullable=True),
    sa.Column('can_ban', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('webhook',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('slot_reserved', 'slot_expired', 'slot_released', 'slot_dead', 'user_banned', name='hooktype'), nullable=True),
    sa.Column('url', sa.String(length=200), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_webhook_type'), 'webhook', ['type'], unique=False)
    op.create_table('auditlog',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('logtime', sa.DateTime(), nullable=True),
    sa.Column('logtype', sa.Enum('login', 'slotreserved', 'slotreleased', 'userupdated', 'reportrun', 'slotupdated', 'info', 'security', name='audittype'), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('data', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('storage_slot',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=30), nullable=False),
    sa.Column('storage_type_id', sa.Integer(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=False, default=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['storage_type_id'], ['storage_type.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('storage',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('slot_id', sa.Integer(), nullable=False),
    sa.Column('started', sa.DateTime(), nullable=False),
    sa.Column('status', sa.Enum('pending','active','expired','closed', name='storagestatus'), nullable=False, default='pending'),
    sa.Column('expiring', sa.DateTime(), nullable=True),
    sa.Column('ended', sa.DateTime(), nullable=True),
    sa.Column('updated', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['slot_id'], ['storage_slot.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_storage_expiring'), 'storage', ['expiring'], unique=False)
    op.create_index(op.f('ix_storage_user_id'), 'storage', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_storage_user_id'), table_name='storage')
    op.drop_index(op.f('ix_storage_expiring'), table_name='storage')
    op.drop_table('storage')
    op.drop_table('storage_slot')
    op.drop_table('auditlog')
    op.drop_index(op.f('ix_webhook_type'), table_name='webhook')
    op.drop_table('webhook')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_table('user')
    op.drop_table('storage_type')
    op.drop_table('kiosk')
    op.drop_index(op.f('ix_configuration_key'), table_name='configuration')
    op.drop_table('configuration')
    # ### end Alembic commands ###
